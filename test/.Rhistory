library(devtools)
install_github("andrewzm/EFDR",dependencies=T)
install_github("andrewzm/EFDR",dependencies=T)
install_github("andrewzm/EFDR",dependencies=T)
library(EFDR)
library(fields)
install.packages("fields")
n = 64
Z <- test_image(n1=n)$z
Z_noisy <- Z + 0.2*rnorm(n^2)
fields::image.plot(Z,zlim=c(-0.5,1.5))
fields::image.plot(Z_noisy,zlim=c(-0.5,1.5))
alpha =     0.05        # 5% significant level
wf =        "la8"       # wavelet name
J =         3           # 3 resolutions
b =         11          # 11 neighbours for EFDR tests
n.hyp =     c(5,10,20,30,40,60,80,100,400,800,1200,2400,4096)  # find optimal number of tests in EFDR from this list
iteration = 100         # number of iterations in MC run when finding optimal n in n.hyp
idp =       0.5         # inverse distance weighting power
nmax =      15          # maximum number of points to consider when carrying out inverse distance interpolation
parallel =  TRUE        # use a parallel backend when carrying out EFDR
set.seed(20)
m1 <- test.bonferroni(Z_noisy, wf=wf,J=J, alpha = alpha)
m2 <- test.fdr(Z_noisy, wf=wf,J=J, alpha = alpha)
m3 <- test.los(Z_noisy, wf=wf,J=J, alpha = alpha)
m4 <- test.efdr(Z_noisy, wf="la8",J=J, alpha = alpha, n.hyp = n.hyp, b=b,iteration=iteration,parallel = parallel)
par(mfrow=c(2,2))
fields::image.plot(m1$Z,main = "Bonferroni",zlim=c(-1,2))
fields::image.plot(m2$Z,main = "FDR",zlim=c(-1,2))
fields::image.plot(m3$Z,main = "LOS",zlim=c(-1,2))
fields::image.plot(m4$Z,main = "EFDR",zlim=c(-1,2))
sig <- wav_th(Z,wf=wf,J=J,th=1)
cat(paste0("Power of Bonferroni test: ",fdrpower(sig,m1$reject_coeff)),sep="\n")
cat(paste0("Power of FDR test: ",fdrpower(sig,m2$reject_coeff)),sep="\n")
cat(paste0("Power of LOS test: ",fdrpower(sig,m3$reject_coeff)),sep="\n")
cat(paste0("Power of EFDR test: ",fdrpower(sig,m4$reject_coeff)),sep="\n")
set.seed(1) # for reproducibility
Z <- test_image(n1=n)$z
Z_noisy <- Z + 2*rnorm(n^2)
fields::image.plot(Z_noisy)
m1 <- test.bonferroni(Z_noisy, wf=wf,J=J, alpha = alpha)
m2 <- test.fdr(Z_noisy, wf=wf,J=J, alpha = alpha)
m3 <- test.los(Z_noisy, wf=wf,J=J, alpha = alpha)
m4 <- test.efdr(Z_noisy, wf="la8",J=J, alpha = alpha, n.hyp = n.hyp, b=b,iteration=iteration,parallel = parallel)
par(mfrow=c(2,2))
fields::image.plot(m1$Z,main = "Bonferroni", zlim=c(-1,2))
fields::image.plot(m2$Z,main = "FDR", zlim=c(-1,2))
fields::image.plot(m3$Z,main = "LOS", zlim=c(-1,2))
fields::image.plot(m4$Z,main = "EFDR", zlim=c(-1,2))
sig <- wav_th(Z,wf=wf,J=J,th=1)
cat(paste0("Power of Bonferroni test: ",fdrpower(sig,m1$reject_coeff)),sep="\n")
cat(paste0("Power of FDR test: ",fdrpower(sig,m2$reject_coeff)),sep="\n")
cat(paste0("Power of LOS test: ",fdrpower(sig,m3$reject_coeff)),sep="\n")
cat(paste0("Power of EFDR test: ",fdrpower(sig,m4$reject_coeff)),sep="\n")
install.packages("RCurl")
install.packages("RCurl")
library(RCurl)
airs.raw <- read.table(textConnection(getURL(
"http://ckannet-storage.commondatastorage.googleapis.com/2014-10-20T02:58:20.801Z/airs-2003may1-16.csv"
)),header=T,sep=",")
install.packages("RCurl")
install.packages("RCurl")
library(RCurl)
airs.raw <- read.table(textConnection(getURL(
"http://ckannet-storage.commondatastorage.googleapis.com/2014-10-20T02:58:20.801Z/airs-2003may1-16.csv"
)),header=T,sep=",")
install.packages("dplyr")
library(dplyr)
airs.raw <- airs.raw %>%
subset(lat > 14 & lat < 66 & lon > -145 & lon < -52) %>%
mutate(x=lon,y=lat,z=co2avgret) %>%
select(day,x,y,z)
install.packages("ggplot2")
library(ggplot2)
NorthAmerica <- map_data("world") %>%
subset(region %in% c("USA","Canada","Mexico"))
par(pin = c(5,1))
ggplot() +
geom_point(data=subset(airs.raw,day%in% 1:3),aes(x=x,y=y,colour=z)) +
geom_path(data=NorthAmerica,aes(x=long,y=lat,group=group)) +
scale_colour_gradient(low="yellow",high="blue") +
coord_fixed(xlim=c(-145,-52),ylim=c(14,66))
idp = 0.5
n1 = 128
airs.interp1 <- airs.raw %>%
subset(day %in% 1:3) %>%
select(-day) %>%
regrid(n1=n1,idp= idp,nmax = nmax) # idp is the inverse distance power and max is the number of neighbours to consider
ggplot() +
geom_tile(data=airs.interp1,aes(x=x,y=y,fill=z)) +
geom_path(data=NorthAmerica,aes(x=long,y=lat,group=group)) +
scale_fill_gradient(low="yellow",high="blue") +
coord_fixed(xlim=c(-145,-52),ylim=c(14,66))
library(EFDR)
library(ggplot2)
NorthAmerica <- map_data("world") %>%
subset(region %in% c("USA","Canada","Mexico"))
par(pin = c(5,1))
ggplot() +
geom_point(data=subset(airs.raw,day%in% 1:3),aes(x=x,y=y,colour=z)) +
geom_path(data=NorthAmerica,aes(x=long,y=lat,group=group)) +
scale_colour_gradient(low="yellow",high="blue") +
coord_fixed(xlim=c(-145,-52),ylim=c(14,66))
library(EFDR)
airs.interp2 <- airs.raw %>%
subset(day %in% 4:6) %>%
select(-day) %>%
regrid(n1=n1,idp= idp,nmax = nmax) # idp is the inverse distance power and max is the number of neighbours to consider
airs.interp <- airs.interp2 %>%
mutate(z = airs.interp1$z - airs.interp2$z)
idp = 0.5
n1 = 128
airs.interp1 <- airs.raw %>%
subset(day %in% 1:3) %>%
select(-day) %>%
regrid(n1=n1,idp= idp,nmax = nmax) # idp is the inverse distance power and max is the number of neighbours to consider
ggplot() +
geom_tile(data=airs.interp1,aes(x=x,y=y,fill=z)) +
geom_path(data=NorthAmerica,aes(x=long,y=lat,group=group)) +
scale_fill_gradient(low="yellow",high="blue") +
coord_fixed(xlim=c(-145,-52),ylim=c(14,66))
airs.interp2 <- airs.raw %>%
subset(day %in% 4:6) %>%
select(-day) %>%
regrid(n1=n1,idp= idp,nmax = nmax) # idp is the inverse distance power and max is the number of neighbours to consider
airs.interp <- airs.interp2 %>%
mutate(z = airs.interp1$z - airs.interp2$z)
ggplot() +
geom_tile(data=airs.interp,aes(x=x,y=y,fill=z)) +
geom_path(data=NorthAmerica,aes(x=long,y=lat,group=group)) +
scale_fill_gradient2(low="blue",high="red", mid="#FFFFCC") +
coord_fixed(xlim=c(-145,-52),ylim=c(14,66))
Z <- df.to.mat(airs.interp)
m1 <- test.bonferroni(Z, wf=wf,J=J, alpha = alpha)
m2 <- test.fdr(Z, wf=wf,J=J, alpha = alpha)
m3 <- test.los(Z, wf=wf,J=J, alpha = alpha)
m4 <- test.efdr(Z, wf="la8",J=J, alpha = alpha, n.hyp = n.hyp, b=b,iteration=iteration,parallel = parallel)
q()
setwd("C:/Users/azm/Dropbox/CurrentProjects/Wollongong/pkgs/waveslim/test")
library(devtools)
setwd("C:/Users/azm/Dropbox/CurrentProjects/Wollongong/pkgs/waveslim/test")
library(devtools)
install("..")
install("..")
setwd("C:/Users/azm/Dropbox/CurrentProjects/Wollongong/pkgs/waveslim/test")
library(devtools)
load_all("..")
data(dau)
x <- dau[64:192,]
#x <- dau
wf = "la8"
J=3
boundary="periodic"
X <- dwt.2d(x,wf,J)
plot.dwt.2d(X)
q()
